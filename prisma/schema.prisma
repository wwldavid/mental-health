
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // 仅用于凭证登录
  username      String?   @unique  // 改为可选
  provider      String?   // 可以保留
  providerId    String?   // 可以保留
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关系
  accounts      Account[]
  sessions      Session[]
  diaryEntries  DiaryEntry[]

  chatUsers     ChatUser[]
  sentMessages  Message[] @relation("SentMessages")

}
model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model DiaryEntry {
  id        Int      @id @default(autoincrement())
  content   String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    Int      // must match User's primary key type
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int     // 注意这里改为 Int 以匹配你的 User 模型
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int      // 注意这里改为 Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        Int       @id @default(autoincrement())
  users     ChatUser[]
  messages  Message[]
  createdAt DateTime  @default(now())
}

model ChatUser {
  id      Int  @id @default(autoincrement())
  chat    Chat @relation(fields: [chatId], references: [id])
  chatId  Int
  user    User @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([chatId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  Int

  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
}



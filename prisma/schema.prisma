generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String?   // 第一步填写的姓名
  email              String    @unique
  password           String    // 加密后存储
  genderIdentity     String?   // 第二步：性别身份
  sexualOrientation  String?   // 第三步：性取向
  reasons            String?   // 第四步：来这里的原因（逗号分隔）
  emailVerified      DateTime?
  image              String?
  role     String   @default("user")    // "user" 或 "counselor"
  provider           String?
  providerId         String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // 关系
  accounts           Account[]
  sessions           Session[]
  diaryEntries       DiaryEntry[]
  chatUsers          ChatUser[]
  sentMessages       Message[] @relation("SentMessages")
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model DiaryEntry {
  id        Int      @id @default(autoincrement())
  content   String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        Int       @id @default(autoincrement())
  users     ChatUser[]
  messages  Message[]
  createdAt DateTime  @default(now())
}

model ChatUser {
  id      Int  @id @default(autoincrement())
  chat    Chat @relation(fields: [chatId], references: [id])
  chatId  Int
  user    User @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([chatId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  Int

  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
}
